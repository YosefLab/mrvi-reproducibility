nextflow.enable.dsl = 2


executor {
  $local {
      queueSize = 5   // number of jobs to run in parallel, replace based on your system
  }
}


profiles {
    standard {
        process.executor = "local"
    }
    gpu {
        process.executor = "local"
    }
}

conda {
    enabled = true
    cacheDir = "${projectDir}/env/.cache"
    useMamba = true
}

params {
    // environments are defined per subworkflow
    env {
        root = "${projectDir}/env/${params.profile}"
        preprocess_data = "${params.env.root}/preprocess_data.yaml"
        run_models = "${params.env.root}/run_models.yaml"
        compute_metrics = "${params.env.root}/compute_metrics.yaml"
        analyze_results = "${params.env.root}/analyze_results.yaml"
    }
    conf {
        root = "${projectDir}/conf"
        datasets = "${params.conf.root}/datasets"
    }
    publish {
        root = "${projectDir}/results"
    }
    workflows {
        root = "${projectDir}/workflows"
    }
    subworkflows {
        root = "${projectDir}/subworkflows"
        preprocess_data = "${params.subworkflows.root}/preprocess_data/main.nf"
        run_models = "${params.subworkflows.root}/run_models/main.nf"
        compute_metrics = "${params.subworkflows.root}/compute_metrics/main.nf"
        analyze_results = "${params.subworkflows.root}/analyze_results/main.nf"
    }
    modules {
        root = "${projectDir}/modules"
        preprocess = "${params.modules.root}/preprocess.nf"
        fit_mrvi = "${params.modules.root}/fit_mrvi.nf"
        get_latent_mrvi = "${params.modules.root}/get_latent_mrvi.nf"
        get_outputs_mrvi = "${params.modules.root}/get_outputs_mrvi.nf"
        fit_scviv2 = "${params.modules.root}/fit_scviv2.nf"
        get_latent_scviv2 = "${params.modules.root}/get_latent_scviv2.nf"
        fit_and_get_latent_composition_scvi = "${params.modules.root}/fit_and_get_latent_composition_scvi.nf"
        fit_and_get_latent_composition_pca = "${params.modules.root}/fit_and_get_latent_composition_pca.nf"
        scib = "${params.modules.root}/scib.nf"
        vendi = "${params.modules.root}/vendi.nf"
        produce_figures_symsim_new = "${params.modules.root}/produce_figures_symsim_new.nf"
        conduct_generic_analysis = "${params.modules.root}/conduct_generic_analysis.nf"
        compute_rf = "${params.modules.root}/compute_rf.nf"
    }
    bin {
        root = "${projectDir}/bin"
        preprocess = "${params.bin.root}/preprocess.py"
        fit_mrvi = "${params.bin.root}/fit_mrvi.py"
        get_latent_mrvi = "${params.bin.root}/get_latent_mrvi.py"
        get_outputs_mrvi = "${params.bin.root}/get_outputs_mrvi.py"
        fit_scviv2 = "${params.bin.root}/fit_scviv2.py"
        get_latent_scviv2 = "${params.bin.root}/get_latent_scviv2.py"
        fit_and_get_latent_composition_scvi = "${params.bin.root}/fit_and_get_latent_composition_scvi.py"
        fit_and_get_latent_composition_pca = "${params.bin.root}/fit_and_get_latent_composition_pca.py"
        scib = "${params.bin.root}/scib.py"
        vendi = "${params.bin.root}/vendi.py"
        produce_figures_symsim_new = "${params.bin.root}/produce_figures_symsim_new.py"
        conduct_generic_analysis = "${params.bin.root}/conduct_generic_analysis.py"
        compute_rf = "${params.bin.root}/compute_rf.py"
    }
    // only relative paths need to be specified here since module outputs
    // are placed in temporary work directories
    outputs {
        data = "data"
        models = "models"
        metrics = "metrics"
        latents = "latents"
        distance_matrices = "distance_matrices"
        figures = "figures"
    }
}

process {
    publishDir = "${params.publish.root}/${params.workflow}"
    withName: "preprocess" {
        conda = "${params.env.preprocess_data}"
    }
    withName: "fit_mrvi" {
        conda = "${params.env.run_models}"
    }
    withName: "get_latent_mrvi" {
        conda = "${params.env.run_models}"
    }
    withName: "get_outputs_mrvi" {
        conda = "${params.env.run_models}"
    }
    withName: "fit_scviv2" {
        conda = "${params.env.run_models}"
    }
    withName: "get_latent_scviv2" {
        conda = "${params.env.run_models}"
    }
    withName: "fit_and_get_latent_composition_scvi" {
        conda = "${params.env.run_models}"
    }
    withName: "fit_and_get_latent_composition_pca" {
        conda = "${params.env.run_models}"
    }
    withName: "scib" {
        conda = "${params.env.compute_metrics}"
    }
    withName: "vendi" {
        conda = "${params.env.compute_metrics}"
    }
    withName: "produce_figures_symsim_new" {
        conda = "${params.env.analyze_results}"
    }
    withName: "conduct_generic_analysis" {
        conda = "${params.env.analyze_results}"
    }
    withName: "compute_rf" {
        conda = "${params.env.compute_metrics}"
    }
}

// params.workflow is passed in from the command line as --workflow
includeConfig "${params.conf.root}/${params.workflow}.config"
